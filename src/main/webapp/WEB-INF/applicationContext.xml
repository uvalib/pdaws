<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:sirsi="http://schemas.sirsidynix.com/symws/standard"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd 
                        http://www.springframework.org/schema/util 
                        http://www.springframework.org/schema/util/spring-util-3.0.xsd 
                        http://camel.apache.org/schema/spring 
                        http://camel.apache.org/schema/spring/camel-spring.xsd">
	
	

<!--
     #		Bean to allow reading properties file values into simple expressions
-->
    <bean id="bridgePropertyPlaceholder" class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
  	<property name="location" value="classpath:pda.properties"/>
    </bean>

<!--
     #		connectors for JDBC to mysql and Oracle
-->
    <bean id="pdamysql" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="org.gjt.mm.mysql.Driver" />
      <property name="username" value="${mysql.username}" />
      <property name="url" value="${mysql.url}"/>
      <property name="password" value="${mysql.password}" />
    </bean>

    <bean id="sirsioracle" class="org.springframework.jdbc.datasource.DriverManagerDataSource">        
      <property name="driverClassName" value="oracle.jdbc.OracleDriver" />
      <property name="url" value="${sirsioracle.url" />
      <property name="username" value="${sirsioracle.username" />
      <property name="password" value="${sirsioracle.password" />
    </bean> 



   <!-- 
   	#	Beans to implement a RESTFUL interface
   -->
   
    <bean id="RestletComponent" class="org.restlet.Component" />
 
    <bean id="RestletComponentService" class="org.apache.camel.component.restlet.RestletComponent">
       <constructor-arg index="0">
         <ref bean="RestletComponent" />
       </constructor-arg>
    </bean>        
    
 
 <!-- 
   	#	Bean to drive a graceful rapid shutdown, much faster than default.
 -->
   
    
    <bean id="shutdown" class="org.apache.camel.impl.DefaultShutdownStrategy">
    	<property name="timeout" value="10"/>
  	</bean>
    
   
 <!-- 
   	#	Beans for specific types if needed 
   -->
        
    <bean id="couttsReply" class="edu.virginia.lib.pdaws.CouttsReply"/>
    <bean id="couttsReplyFactory" class="edu.virginia.lib.pdaws.CouttsReplyFactory"/>
    <bean id="virgoRequest" class="edu.virginia.lib.pdaws.VirgoRequest"/>
    <bean id="printOrderRow" class="edu.virginia.lib.pdaws.PrintOrderRow"/>
    <bean id="rowProcessor" class="edu.virginia.lib.pdaws.RowProcessor"/>
            
 <!-- 
   	#
   	#	Initialize the Camel Context 
   	#
   	#	 
 -->
    
    <camelContext id="camel" trace="false" streamCache="true" xmlns="http://camel.apache.org/schema/spring" >

    <properties>
        <property key="CamelLogDebugBodyMaxChars" value="4000"/>
    </properties>
     
    
    <dataFormats>
      <xstream id="xstream-utf8" encoding="UTF-8" />
      <xstream id="xstream-default"/>
      <json id="couttsReplyJSON" library="Jackson" unmarshalTypeName="edu.virginia.lib.pdaws.CouttsReply"/>
      <json id="virgoRequestJSON" library="Jackson" unmarshalTypeName="edu.virginia.lib.pdaws.VirgoRequest"/>
      
    </dataFormats>    
     
	
<!--
=================================================================================

    Route : archiveOrders
    Route to examine each print order, and move orders for books in location
		other than "on order" or "not yet ordered" to archive table since
		the idea is they must be in hand (or cancelled) so they no 
		longer look like PDA/potential orders books to Virgo.
		Keeps print_order table small.
     Parameters: none

=================================================================================
-->
    <route id="archiveOrders" xmlns="http://camel.apache.org/schema/spring" >

	<from uri="restlet:/archiveOrders" />
<!--
	select all the orders
-->
	<removeHeaders pattern="*" excludePattern="isbn|catkey|computingID|loc|fundCode|loanType"/>
	<setBody>
		<constant>SELECT isbn, catalog_key FROM print_order WHERE vendor_order_number is not NULL;</constant>
	</setBody>
	<to uri="jdbc:pdamysql"/>
<!--
	pick out catalog key and query SIRSI web services for current location
-->
	<split>
	<simple>${body}</simple>
		<to uri="bean:rowProcessor"/>
		<removeHeaders pattern="*" excludePattern="isbn|catkey|computingID|loc|fundCode|loanType"/>
          	<setHeader headerName="Content-Type"><constant>application/xml</constant> </setHeader>
		<setHeader headerName="CamelHttpMethod"> <constant>GET</constant> </setHeader>
          	<setHeader headerName="CamelAcceptContentType"> <constant>application/xml</constant> </setHeader>
		<setHeader headerName="x-sirs-clientID"> <simple>${properties:sirsiws.clientID}</simple> </setHeader>
          	<setHeader headerName="CamelHttpUri"> <simple>${properties:sirsiws.url}</simple> </setHeader>
          	<setHeader headerName="CamelHttpQuery">
            		<simple>${properties:sirsiws.queryStringPreamble}&amp;titleID=${body.getCatkey}</simple>
          	</setHeader>

          	<setHeader headerName="catkey">
            		<simple>${body.getCatkey}</simple>
          	</setHeader>

          	<setHeader headerName="isbn">
            		<simple>${body.getIsbn}</simple>
          	</setHeader>

          	<setBody><constant>null</constant></setBody>

      		<to uri="http://mybogusaddress.com"/>

		<setHeader headerName="where">
		<xpath resultType="java.lang.String">
			//sirsi:TitleInfo/sirsi:CallInfo/sirsi:ItemInfo/sirsi:currentLocationID/text()
		</xpath>
		</setHeader>

		<setBody><constant>null</constant></setBody>

		<choice>
<!-- 		
		when current location means it has not arrived, just keep
		otherwise, move it to archive table
-->

		<when> <simple>${headers.where} == "NOTORDERED" || ${headers.where} == "ON-ORDER"</simple>
			<log message="keeping ${headers.catkey}, ${headers.isbn}  - loc ${headers.where}"/>
          	</when>
		<otherwise>
			<log message="archiving ${headers.catkey}, ${headers.isbn} - loc ${headers.where}"/>
			<removeHeaders pattern="*" excludePattern="isbn|catkey|computingID|loc|fundCode|loanType"/>

			<setBody>
				<simple>INSERT INTO print_order_archive (SELECT * FROM print_order WHERE isbn = ${headers.isbn});</simple>
			</setBody>
			<to uri="jdbc:pdamysql"/>

			<removeHeaders pattern="*" excludePattern="isbn|catkey|computingID|loc|fundCode|loanType"/>
			<setBody>
				<simple>DELETE FROM print_order WHERE print_order.isbn = (SELECT DISTINCT print_order_archive.isbn FROM print_order_archive WHERE print_order_archive.isbn = ${headers.isbn});</simple>
			</setBody>
			<to uri="jdbc:pdamysql"/>
		</otherwise>
		</choice>

	</split>
	<removeHeaders pattern="*" excludePattern="isbn|catkey|computingID|loc|fundCode|loanType"/>
<!--
	show something helpful on return web page
-->
	<setBody>
		<simple>SELECT table_name, table_rows FROM information_schema.tables WHERE table_schema = "${properties:mysql.dbname}"</simple>
	</setBody>
	<to uri="jdbc:pdamysql"/>
	
   </route>
<!--
=================================================================================

    Route : getPDAOrder
    Route retrieve record of previous PDA purchase from mysql table

     Parameters:

        catkey        :  key for SIRSI items

=================================================================================
-->

    <route id="getPDAOrder" xmlns="http://camel.apache.org/schema/spring" >
      <from uri="restlet:/order/{catkey}?restletMethod=GET"/>
        <choice>
          <when>
            <simple>${headers.catkey}</simple>
                      <setBody>
                        <simple>SELECT isbn, catalog_key, computing_id, vendor_order_number, hold_library, fund_code, loan_type FROM print_order WHERE catalog_key = '${headers.catkey}'</simple>
                      </setBody>
          </when>
          <otherwise>
            <setBody>
              <constant>No catalog key was provided.</constant>
            </setBody>
          </otherwise>
        </choice>
      <to uri="jdbc:pdamysql"/>
      <choice>
      	<when><simple>${headers.CamelJdbcRowCount} != 1</simple>
	 	<setBody><simple>No matching order for catalog key ${headers.catkey}</simple></setBody>
      	</when>
      </choice>
      <removeHeaders pattern="*" excludePattern="isbn|catkey|computingID|loc|fundCode|loanType"/>


    </route>

<!-- 
================================================================================
     Main Flow/routes:
     createPDAOrder call with POST to a restlet -> 
	gratSIRSIData to get fundCode and library (Site) -> 
        insertPDAOrder to attempt insert of order details into mysql table 
		successful insert guarentees single order per book -> 
	createCouttsOrder to build and send http transaction to send to Proquest creating order ->
		bad return? side trip to delete inserted line from mysql table since no order
		good return? update mysql table row with order number from Proquest
     return results to Virgo as response to POST

-->
		
 
<!--
=================================================================================

      Route : createPDAOrder
      Call to buy print item from Coutts

      Input parameters :
	isbn 
	catalog key (catkey)
        computingID 
	owning library (loc)
	
      Output: body contains serialized JSON object with results

=================================================================================
-->

    <route id="createPDAOrder"  trace="true" xmlns="http://camel.apache.org/schema/spring" >
      <from uri="restlet:/order?restletMethod=POST"/>
	<unmarshal ref="virgoRequestJSON"/>
	<setHeader headerName="isbn"><simple>${body.getIsbn}</simple></setHeader>
	<setHeader headerName="catkey"><simple>${body.getCatkey}</simple></setHeader>
	<setHeader headerName="computingID"><simple>${body.getComputingID}</simple></setHeader>

<!--
     #
     # grab fund code and maybe location from marc in SIRSI
     #
-->
      <to uri="direct:grabSIRSIData" />

	
<!-- 
     #
     # send off to try insert into mysql table w/primary key = isbn
     #
-->

      <to uri="direct:insertPDAOrder"/>
          <choice>
<!--   
     #
     # check to see if insert worked
     #   off to Coutts to order the book if it did...
     #
-->
          <when>
             <simple>${headers.insertSuccess} == 1</simple>
		<log message="INSERTED: order for ${headers.isbn}, ${headers.catkey}, ${headers.computingID}, ${headers.loc}, ${headers.fundCode}"/> 

		<to uri="direct:createCouttsOrder"/>

<!--
    #	siphon off the reply from Coutts to test for failure
    #	because you need to delete that row from mysql if order failed
    #	or update with order number from coutts if it worked
-->

		<removeHeaders pattern="*" excludePattern="isbn|catkey|computingID|loc|fundCode|loanType"/>
<!--		
    #		but first, wrap processing Coutts reply in 
    #		try-catch since they don't always
    #		send back legal JSON
    #		Fake up an error reply that works when they send garbage
-->
		<doTry>
		<unmarshal ref="couttsReplyJSON"/>
		<doCatch>
			<exception>java.io.IOException</exception>
			<log message="non JSON return from coutts"/>
			<bean ref="couttsReplyFactory" method="makeAPIErrorReply"/>
		</doCatch>
		</doTry>

		<setHeader headerName="retcode"> <simple>${body.getCode}</simple> </setHeader>
		<log message="RETURN CODE: for ${headers.isbn} from vendor - ${headers.retcode}"/>
		<setHeader headerName="orderNumber"> <simple>${body.getOrderNumber}</simple> </setHeader>
		<wireTap uri="direct:updateOrder"/>
          </when>
<!--
     #
     #   there was some problem with the insert need to send Virgo some sort of error
     #
-->
         <otherwise>
		<bean ref="couttsReplyFactory" method="makeSQLErrorReply"/>
        </otherwise>
        </choice>
<!--
    #   serialize the json fields you want back to virgo
-->
	<marshal ref="couttsReplyJSON"/>
    </route>


<!--
=================================================================================

      Route : grabSIRSIData
	GET to SIRSI WebServices tomcat app to collect data from Marc fields

      Input parameters :
        catalog key (catkey)

      Output: two headers, fundCode and loc set from 949, 985 tags in title record for
              given catalog key

=================================================================================
-->
    <route id="grabSIRSIData" xmlns="http://camel.apache.org/schema/spring"  >
     <from uri="direct:grabSIRSIData"/>
	  <removeHeaders pattern="*" excludePattern="isbn|catkey|computingID|loc|fundCode|loanType"/>
          <setHeader headerName="CamelHttpMethod"> <constant>GET</constant> </setHeader>
          <setHeader headerName="CamelAcceptContentType"> <constant>application/xml</constant> </setHeader>
          <setHeader headerName="x-sirs-clientID"> <simple>${properties:sirsiws.clientID}</simple> </setHeader>
          <setHeader headerName="CamelHttpUri"> <simple>${properties:sirsiws.url}</simple> </setHeader>
          <setHeader headerName="CamelHttpQuery">
	    <simple>${properties:sirsiws.queryStringPreamble}&amp;titleID=${headers.catkey}</simple>
	  </setHeader>
	  <setHeader headerName="Content-Type">
            <constant>application/xml</constant>
          </setHeader>
          <setBody><constant>null</constant></setBody>

      <to uri="http://mybogusaddress.com"/>

<!--
    #     Pick out the text from the Marc tags in the XML reply
-->
	  <removeHeaders pattern="*" excludePattern="isbn|catkey|computingID|loc|fundCode|loanType"/>
	  <setHeader headerName="loc">
		<xpath  resultType="java.lang.String">
			//sirsi:TitleInfo/sirsi:BibliographicInfo/sirsi:MarcEntryInfo[sirsi:entryID=949]/sirsi:text/text()
		</xpath>
	  </setHeader>
	  <setHeader headerName="fundCodeRaw">
		<xpath resultType="java.lang.String">
			//sirsi:TitleInfo/sirsi:BibliographicInfo/sirsi:MarcEntryInfo[sirsi:entryID=985]/sirsi:text/text()
		</xpath>
	  </setHeader>
<!--
    #	  Stupid 985 tag has sub-fields so split those out into two different order parameters
    #     Don't have definitive list of values, so let's hope this always works...
-->
	  <choice>
		<when>
			<simple>${headers.fundCodeRaw}</simple>
	    			<setHeader headerName="fundCode">
					<simple>${headers.fundCodeRaw.replaceAll(" .*","")}</simple>
	    			</setHeader>
				<setHeader headerName="loanType">
					<simple>${headers.fundCodeRaw.replaceAll(".* ","")}</simple>
	    			</setHeader>
		</when>
		<otherwise>
			<setHeader headerName="fundCode"> <constant>COUTTS1PD</constant></setHeader>
			<setHeader headerName="loanType"> <constant>none</constant></setHeader>
		</otherwise>
	  </choice>
	
    </route>


     

<!--
===========================================================================================================
     Route: insertPDAOrder
      Route to attempt insert into table keyed on isbn.  Insert will fail if row for that isbn
        exists, so we know to tell Virgo book already ordered. Or will succeed, locking out future
        orders.

      Expects headers containing isbn, catkey, loc (owning library), fund code,  
		loan type, and computingID
      Produces
==========================================================================================================
-->

    <route id="insertPDAOrder" xmlns="http://camel.apache.org/schema/spring"  >
     <from uri="direct:insertPDAOrder"/>
<!--
     onException:

     Inserting duplicate isbn will toss exception so you will know book is already on order
	Need to fake reply to Virgo for this.
-->
      <onException>
        <exception>com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException</exception>
        <handled>
                <constant>true</constant>
        </handled>
	<removeHeaders pattern="*" excludePattern="isbn|computingID|catkey|loc|fundCode|loanType"/>
	<log message="INSERT FAILED FOR DUPE KEY: ${headers.isbn}, ${headers.catkey}, ${headers.computingID}, ${headers.loc}, ${headers.fundCode}, ${headers.loanType}"/>
	<bean ref="couttsReplyFactory" method="makeDupeErrorReply"/>
	<marshal ref="couttsReplyJSON"/>
     </onException>
<!--
        #
	#	handle general SQL errors so something intelligible is returned to Virgo
	#
-->
      <onException>
        <exception>java.sql.SQLException</exception>
        <handled> <constant>true</constant> </handled>
	<removeHeaders pattern="*" excludePattern="isbn|computingID|catkey|loc|fundCode|loanType"/>
	<log message="INSERT FAILED WITH SQL ERROR: ${headers.isbn}, ${headers.catkey}, ${headers.computingID}, ${headers.loc}, ${headers.fundCode}, ${headers.loanType}"/>
	<bean ref="couttsReplyFactory" method="makeSQLErrorReply"/>
	<marshal ref="couttsReplyJSON"/>
     </onException>
	
	
<!--
     End of excecption handling...
-->

        <setBody>
                <simple>INSERT INTO print_order (isbn, catalog_key, computing_id, hold_library, fund_code , loan_type)
                        VALUES ('${headers.isbn}', '${headers.catkey}', '${headers.computingID}', '${headers.loc}', '${headers.fundCode}', '${headers.loanType}'); </simple>
        </setBody>

      <to uri="jdbc:pdamysql"/>
	<choice>
             <when>
		<simple>${headers.CamelJdbcUpdateCount} == 1</simple>
      			<setHeader headerName="insertSuccess"><constant>1</constant></setHeader>
			<log message="INSERT SUCCEEDED: ${headers.isbn}, ${headers.catkey}, ${headers.computingID}, ${headers.loc}, ${headers.fundCode}, ${headers.loanType}"/>
	     </when>
	     <otherwise>
		<setHeader headerName="insertSuccess"><constant>0</constant></setHeader>
		<log message="INSERT FAILED: ${headers.isbn}, ${headers.catkey}, ${headers.computingID}, ${headers.loc}, ${headers.fundCode}, ${headers.loanType} update count $headers.CamelJdbcUpdateCount}"/>
	     </otherwise>
	</choice>
     </route>




    <route id="createCouttsOrder" xmlns="http://camel.apache.org/schema/spring"  >
      <from uri="direct:createCouttsOrder"/>
<!--
     #		try to look up translation for library code from properties file
     #		if no match, catch resulting exception and send upmapped value
-->
	<doTry>
		<removeHeaders pattern="*" excludePattern="isbn|computingID|catkey|loc|fundCode|loanType"/>
                <setHeader headerName="CamelHttpMethod"> <constant>GET</constant> </setHeader>
                <setHeader headerName="CamelHttpUri"> <simple>${properties:proquest.hostURL}</simple> </setHeader>
                <setHeader headerName="CamelHttpQuery">
                	<simple>${properties:proquest.queryStringPreamble}&amp;ISBN=${headers.isbn}&amp;patronid=${headers.computingID}&amp;Site=${properties:libtran.$simple{headers.loc}}&amp;Budget=${headers.fundCode}&amp;Loantype=${headers.loanType}</simple>
                </setHeader>
                <setBody><constant>null</constant></setBody>

                <to uri="jetty:http://mybogusaddress.com?throwExceptionOnFailure=false"/>
	<doCatch>
		<exception>org.apache.camel.RuntimeCamelException</exception>
		<exception>java.lang.IllegalArgumentException</exception>
		<log message="BAD LOC FAILED TO TRANSLATE - ${headers.loc}"/>
		<removeHeaders pattern="*" excludePattern="isbn|computingID|catkey|loc|fundCode|loanType"/>
                <setHeader headerName="CamelHttpMethod"> <constant>GET</constant> </setHeader>
                <setHeader headerName="CamelHttpUri"> <simple>${properties:proquest.hostURL}</simple> </setHeader>
                <setHeader headerName="CamelHttpQuery">
                	<simple>${properties:proquest.queryStringPreamble}&amp;ISBN=${headers.isbn}&amp;patronid=${headers.computingID}&amp;Site=${headers.loc}&amp;Budget=${headers.fundCode}&amp;Loantype=${headers.loanType}</simple>
                </setHeader>
                <setBody><constant>null</constant></setBody>

                <to uri="jetty:http://mybogusaddress.com?throwExceptionOnFailure=false"/>
	</doCatch>
	</doTry>
		
   </route>

<!--
================================================================================================
     Route: updateOrder
      route to test reply to Coutts order request and delete mysql record if
      Coutts send back a fail response
================================================================================================
-->
    <route id="updateOrder" xmlns="http://camel.apache.org/schema/spring" >
    <from uri="direct:updateOrder"/>
	<choice>
	<when>
  	  <simple>${header.retcode} != 100</simple>
		<setBody> <simple>DELETE FROM print_order WHERE isbn = '${headers.isbn}';</simple> </setBody>
		<to uri="jdbc:pdamysql"/>
		<log message="DELETED: order for ${headers.isbn} - after return code = '${header.retcode}'"/>
	</when>
	<otherwise>
		<setBody> <simple>UPDATE print_order SET vendor_order_number = '${headers.orderNumber}' where isbn = '${headers.isbn}';</simple> </setBody>
		<to uri="jdbc:pdamysql"/>
		<log message="UPDATED: order number ${headers.orderNumber} to order for isbn ${headers.isbn}"/>

	</otherwise>
	</choice>
    </route>

   </camelContext> 
   </beans>
